1-table d'analyse LL :
savoir la construire
**regle essentielle**:
si X non terminal est tel que X->Y1....Yn alors premier(X) retrouve premier(Y1) sauf epsilon.
--------------------LL-first:(debut initial d'un symbole non terminal derive d'un terminal)
<=>premier(A) avec A->alpha* * bêta par exemple.(on prend le terminal symbole alpha)
--------------------LL-follow:
Pour tout symbole non terminal, on calcule suivant A :
ensemble des terminaux pouvant apparaître immédiatement à droite de A.
S*->alpha*A*a*bêta
Dans la derivation ci-dessus "a" est un element de l'ensemble suivant (A). FACILE.
--------------------
ASTUCE: le reconnaitre depuis PREMIER:
**(1)SUIVANT(A) est l'ensemble des terminaux pouvant apparaître à droite de A dans une dérivation S->alpha A a____ bêta
**(2)Pour chaque production A->alphaBbêta ou B est un non-terminal, ajouter le contenu de premier(bêta) dans SUIVANT(A) sauf epsilon.(apres derivation;ca rejoint la regle 5)
--**(3)Pour chaque production A->alpha*B*bêta ou B est nn-terminal, premier(bêta)=premier(Ae)={a,e}. PAS LA PEINE DE SE COMPLIQUER LA VIE. A on peut le deriver se trouvant apres apres S.
**(4)SUIVANT(A) est l'ensemble des terminaux pouvant apparaître immédiatement à droite de A dans une dérivation S->alpha*A*a*bêta.
**(5)Pour chaque production A->alpha*B , alors ajouter SUIVANT(A) à SUIVANT(B).
*********************************************
*********************************************
*********************************************
*********************************************
Construction de la tablea d'analyse LL:
1->Pour chaque production A->alpha faire:
	pour tout a dans premier alpha different de epsilon rajouter la production A->alpha dans la case M[A,a]
	si epsilon dans PREMIER(apha), alors pour chaque b dans SUIVANT(A), rajouter la production A->alpha dans M[A,b].
2->Chaque case M[A,a] vide constitue une erreur syntaxique.
table facile a creer
si epsilon le suivant dans la ligne
sinon on revient au cas classique de repertorier les symboles dans leurs contextes.


















=>BUT: Accepter/Rejeter un mot par une grammaire:
utiliser cette table pour rejeter ou accepter un mot:
comment generer l'arbre de derivation:
pile+algo+table de derivation.











>>>facile: algo trivial a suivre depiler empiler (lordre!!!)
et voilà.
